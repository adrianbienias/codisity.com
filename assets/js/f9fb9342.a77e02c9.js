"use strict";(self.webpackChunkcodisity_com=self.webpackChunkcodisity_com||[]).push([[7263],{3905:(e,t,a)=>{a.d(t,{Zo:()=>l,kt:()=>u});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},l=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},d="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},y=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=o(e,["components","mdxType","originalType","parentName"]),d=p(a),y=r,u=d["".concat(s,".").concat(y)]||d[y]||m[y]||i;return a?n.createElement(u,c(c({ref:t},l),{},{components:a})):n.createElement(u,c({ref:t},l))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,c=new Array(i);c[0]=y;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[d]="string"==typeof e?e:r,c[1]=o;for(var p=2;p<i;p++)c[p]=a[p];return n.createElement.apply(null,c)}return n.createElement.apply(null,a)}y.displayName="MDXCreateElement"},6091:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>c,default:()=>m,frontMatter:()=>i,metadata:()=>o,toc:()=>p});var n=a(7462),r=(a(7294),a(3905));const i={},c="Static and dynamic type checking",o={unversionedId:"basics/software/static-and-dynamic-type-checking",id:"basics/software/static-and-dynamic-type-checking",title:"Static and dynamic type checking",description:"Static and dynamic type checking are two different approaches to verifying and enforcing data types in programming languages. They are methods used to catch type-related errors and ensure the correctness and reliability of code. Here's an explanation of both:",source:"@site/docs/010-basics/040-software/020-static-and-dynamic-type-checking.mdx",sourceDirName:"010-basics/040-software",slug:"/basics/software/static-and-dynamic-type-checking",permalink:"/basics/software/static-and-dynamic-type-checking",draft:!1,editUrl:"https://github.com/adrianbienias/codisity.com/blob/main/docs/010-basics/040-software/020-static-and-dynamic-type-checking.mdx",tags:[],version:"current",sidebarPosition:20,frontMatter:{},sidebar:"basicsSidebar",previous:{title:"API",permalink:"/basics/software/api"},next:{title:"Programming paradigms",permalink:"/basics/software/programming-paradigms"}},s={},p=[{value:"Links",id:"links",level:2}],l={toc:p},d="wrapper";function m(e){let{components:t,...a}=e;return(0,r.kt)(d,(0,n.Z)({},l,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"static-and-dynamic-type-checking"},"Static and dynamic type checking"),(0,r.kt)("p",null,"Static and dynamic type checking are two different approaches to verifying and enforcing data types in programming languages. They are methods used to catch type-related errors and ensure the correctness and reliability of code. Here's an explanation of both:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"1. Static Type Checking:")),(0,r.kt)("p",null,"Static type checking is a type checking method that is performed at compile time, before the code is executed. It involves analyzing the code without actually running it and verifying that variables and expressions are used in a way that is consistent with their declared types. If any type-related issues are found during this analysis, the compiler reports them as errors, preventing the code from being compiled until these errors are resolved."),(0,r.kt)("p",null,"Key characteristics of static type checking:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Compile-Time Verification:")," Errors are caught at compile time, meaning that programmers receive feedback about type-related issues before the program runs."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Strong Typing:")," Static typing enforces strict type rules, making sure that variables and expressions are used in a way that is consistent with their declared types."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Examples:")," Languages like C, C++, Java, and C# use static type checking.")),(0,r.kt)("p",null,"Example of static type checking in Java:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'int x = 10;\nString y = "Hello";\nint result = x + y; // This will generate a compile-time error because you can\'t add an int and a String.\n')),(0,r.kt)("p",null,"Static type checking can help catch many common programming errors early in the development process, which can lead to more robust and reliable code."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"2. Dynamic Type Checking:")),(0,r.kt)("p",null,"Dynamic type checking, on the other hand, is performed at runtime while the code is being executed. In dynamically typed languages, variables do not have explicit type declarations, and their types can change during the program's execution. Type checks are performed as operations are executed, and if a type-related error is encountered, it results in a runtime error or exception."),(0,r.kt)("p",null,"Key characteristics of dynamic type checking:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Runtime Verification:")," Type checks are performed during program execution, and errors are discovered when the problematic code path is reached."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Duck Typing:")," In some dynamically typed languages, the focus is on whether an object can respond to a particular message or method call rather than its specific type."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Examples:")," Languages like Python, JavaScript, Ruby, and PHP use dynamic type checking.")),(0,r.kt)("p",null,"Example of dynamic type checking in Python:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'x = 10\ny = "Hello"\nresult = x + y  # This will raise a TypeError at runtime because you can\'t add an int and a str.\n')),(0,r.kt)("p",null,"Dynamic type checking allows for more flexibility but can also lead to runtime errors that may be more challenging to debug, especially in large and complex codebases. However, it can be more concise and expressive in certain scenarios."),(0,r.kt)("p",null,"In summary, the choice between static and dynamic type checking depends on the programming language and the goals of the software project. Static type checking offers early error detection and type safety but may require more explicit type declarations. Dynamic type checking provides flexibility but may result in runtime errors if type-related issues are not handled properly. Each approach has its advantages and trade-offs, and the choice often comes down to the preferences and requirements of the developers and the specific use case."),(0,r.kt)("h2",{id:"links"},"Links"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Type_system"},"Type system - Wikipedia")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Strong_and_weak_typing"},"Strong and weak typing - Wikipedia"))))}m.isMDXComponent=!0}}]);