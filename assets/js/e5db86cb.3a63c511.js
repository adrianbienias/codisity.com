"use strict";(self.webpackChunkcodisity_com=self.webpackChunkcodisity_com||[]).push([[5298],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>k});var s=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,s)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,s,r=function(e,t){if(null==e)return{};var a,s,r={},n=Object.keys(e);for(s=0;s<n.length;s++)a=n[s],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(s=0;s<n.length;s++)a=n[s],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=s.createContext({}),c=function(e){var t=s.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},m="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(a),u=r,k=m["".concat(l,".").concat(u)]||m[u]||d[u]||n;return a?s.createElement(k,o(o({ref:t},p),{},{components:a})):s.createElement(k,o({ref:t},p))}));function k(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,o=new Array(n);o[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i[m]="string"==typeof e?e:r,o[1]=i;for(var c=2;c<n;c++)o[c]=a[c];return s.createElement.apply(null,o)}return s.createElement.apply(null,a)}u.displayName="MDXCreateElement"},3595:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>n,metadata:()=>i,toc:()=>c});var s=a(7462),r=(a(7294),a(3905));const n={tags:["Kafka","RabbitMQ"]},o="Message brokers",i={unversionedId:"backend/message-brokers/index",id:"backend/message-brokers/index",title:"Message brokers",description:"A message broker is a middleware software component or service that facilitates communication and data exchange between different applications, systems, or components. It acts as an intermediary, ensuring that messages (data packets or events) are efficiently routed from senders to receivers while decoupling the producers of messages from the consumers. Message brokers play a crucial role in building distributed and decoupled systems, and they are commonly used in various domains, including enterprise architecture, microservices, and IoT (Internet of Things). Here's an explanation of key concepts related to message brokers:",source:"@site/docs/040-backend/100-message-brokers/index.mdx",sourceDirName:"040-backend/100-message-brokers",slug:"/backend/message-brokers/",permalink:"/backend/message-brokers/",draft:!1,editUrl:"https://github.com/adrianbienias/codisity.com/blob/main/docs/040-backend/100-message-brokers/index.mdx",tags:[{label:"Kafka",permalink:"/tags/kafka"},{label:"RabbitMQ",permalink:"/tags/rabbit-mq"}],version:"current",frontMatter:{tags:["Kafka","RabbitMQ"]},sidebar:"backendSidebar",previous:{title:"Search engines",permalink:"/backend/search-engines/"},next:{title:"Emails handling",permalink:"/backend/emails-handling/"}},l={},c=[{value:"Links",id:"links",level:2}],p={toc:c},m="wrapper";function d(e){let{components:t,...a}=e;return(0,r.kt)(m,(0,s.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"message-brokers"},"Message brokers"),(0,r.kt)("p",null,"A message broker is a middleware software component or service that facilitates communication and data exchange between different applications, systems, or components. It acts as an intermediary, ensuring that messages (data packets or events) are efficiently routed from senders to receivers while decoupling the producers of messages from the consumers. Message brokers play a crucial role in building distributed and decoupled systems, and they are commonly used in various domains, including enterprise architecture, microservices, and IoT (Internet of Things). Here's an explanation of key concepts related to message brokers:"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Key Concepts of Message Brokers:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Message:")," A message is a unit of data or information sent from one application or component to another. Messages can be simple data packets, complex data structures, events, or commands.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Producer:")," A producer is an application or component that generates and sends messages to the message broker. Producers initiate the communication process.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Consumer:")," A consumer is an application or component that receives and processes messages from the message broker. Consumers subscribe to specific types of messages or message channels.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Queue:")," A queue is a message destination where messages are placed in a linear order. Each message in a queue is typically processed by a single consumer (point-to-point communication).")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Topic:")," A topic is a message destination that allows multiple consumers to subscribe to the same type of message or event. When a message is sent to a topic, it is delivered to all interested consumers (publish-subscribe communication).")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Middleware:")," Message brokers often act as middleware, providing a layer of software between applications to handle messaging and communication tasks."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"How Message Brokers Work:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Publishing:")," Producers publish messages to the message broker by specifying a destination (queue or topic) and the content of the message. The broker stores the message and manages its delivery.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Routing:")," The message broker routes messages to the appropriate consumers based on predefined rules and subscriptions. For topics, messages are delivered to all interested consumers. For queues, messages are delivered to a single consumer.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Persistence:")," Many message brokers provide options for message persistence, ensuring that messages are not lost even in the event of system failures.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Decoupling:")," Message brokers enable decoupling between producers and consumers. Producers do not need to know the identities or locations of consumers, and consumers do not need to interact directly with producers. This decoupling promotes flexibility and scalability in distributed systems."))),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Use Cases for Message Brokers:")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Integration:")," Message brokers are used in enterprise integration scenarios to connect diverse applications and systems, allowing them to exchange data and events seamlessly.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Microservices:")," In microservices architectures, message brokers facilitate communication between loosely coupled services, enabling asynchronous processing and scalability.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"IoT:")," Message brokers are used in IoT ecosystems to collect, process, and distribute data from sensors and devices to applications and analytics platforms.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Event-Driven Systems:")," Message brokers are well-suited for building event-driven systems, where events (such as user actions or system events) trigger actions or updates across different components.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Scalability and Load Balancing:")," Message brokers help distribute workloads and balance traffic in scalable systems by distributing messages to consumers efficiently.")),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},"Log and Event Streams:")," In log and event streaming architectures, message brokers are used to collect and distribute log data, telemetry, and events for real-time analysis."))),(0,r.kt)("p",null,"Popular message broker systems include Apache Kafka, RabbitMQ, Apache ActiveMQ, NATS, and cloud-based services like AWS SQS (Simple Queue Service) and Azure Service Bus. The choice of message broker depends on factors like scalability, durability, and the specific requirements of the application or system being built. Message brokers are fundamental components for building distributed and resilient software systems that can handle communication and data flow efficiently."),(0,r.kt)("h2",{id:"links"},"Links"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Message_broker"},"Message broker - Wikipedia")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Apache_Kafka"},"Apache Kafka - Wikipedia")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/RabbitMQ"},"RabbitMQ - Wikipedia")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://blog.bytebytego.com/p/how-to-choose-a-message-queue-kafka"},"How to Choose a Message Queue? - ByteByteGo Newsletter"))))}d.isMDXComponent=!0}}]);