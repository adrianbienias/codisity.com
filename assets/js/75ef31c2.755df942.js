"use strict";(self.webpackChunkcodisity_com=self.webpackChunkcodisity_com||[]).push([[6439],{3905:(e,t,a)=>{a.d(t,{Zo:()=>u,kt:()=>d});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),c=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},u=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(a),h=n,d=p["".concat(l,".").concat(h)]||p[h]||m[h]||i;return a?r.createElement(d,o(o({ref:t},u),{},{components:a})):r.createElement(d,o({ref:t},u))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=a.length,o=new Array(i);o[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,a)}h.displayName="MDXCreateElement"},9849:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=a(7462),n=(a(7294),a(3905));const i={},o="Software architecture",s={unversionedId:"basics/software-architecture/index",id:"basics/software-architecture/index",title:"Software architecture",description:"Software architecture refers to the high-level structural design of a software system. It encompasses the organization of a software system's components or modules, their relationships, and the principles and guidelines governing their design and interaction. Software architecture provides a blueprint for the construction and evolution of a software application, ensuring that it meets the desired functionality, quality attributes, and performance goals. Here are key aspects to understand about software architecture:",source:"@site/docs/010-basics/200-software-architecture/index.mdx",sourceDirName:"010-basics/200-software-architecture",slug:"/basics/software-architecture/",permalink:"/basics/software-architecture/",draft:!1,editUrl:"https://github.com/adrianbienias/codisity.com/blob/main/docs/010-basics/200-software-architecture/index.mdx",tags:[],version:"current",frontMatter:{},sidebar:"basicsSidebar",previous:{title:"Visual Studio Code",permalink:"/basics/code-editors/visual-studio-code"},next:{title:"Project management",permalink:"/basics/project-management/"}},l={},c=[{value:"Links",id:"links",level:2}],u={toc:c},p="wrapper";function m(e){let{components:t,...a}=e;return(0,n.kt)(p,(0,r.Z)({},u,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"software-architecture"},"Software architecture"),(0,n.kt)("p",null,"Software architecture refers to the high-level structural design of a software system. It encompasses the organization of a software system's components or modules, their relationships, and the principles and guidelines governing their design and interaction. Software architecture provides a blueprint for the construction and evolution of a software application, ensuring that it meets the desired functionality, quality attributes, and performance goals. Here are key aspects to understand about software architecture:"),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"1. Purpose of Software Architecture:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"The primary purposes of software architecture include:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Structural Organization:")," Defining how a software system is structured into components, such as modules, layers, and services."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Quality Assurance:")," Ensuring that the software system meets its functional requirements while achieving desired quality attributes like performance, reliability, scalability, and security."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Maintainability:")," Facilitating ease of maintenance, enhancements, and updates over the software's lifecycle."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Communication:")," Providing a common language and understanding for stakeholders, including developers, designers, project managers, and clients."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Risk Mitigation:")," Identifying potential risks and challenges early in the development process and addressing them through architectural decisions."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Cost and Resource Management:")," Efficiently allocating resources and minimizing development costs.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"2. Components of Software Architecture:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Software architecture typically includes the following components:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Components/Modules:")," These are the building blocks of the system, representing individual pieces of functionality. Components can be organized into layers or services."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Relationships:")," Describes how components interact with each other, including communication patterns, data flow, and dependencies."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Quality Attributes:")," Specifies the desired non-functional characteristics of the system, such as performance, reliability, security, scalability, and maintainability."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Patterns and Styles:")," Architectural patterns and styles (e.g., client-server, microservices, monolithic) guide the overall structure of the system."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Decisions and Rationale:")," Documentation of key architectural decisions, design trade-offs, and reasoning behind architectural choices.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"3. Types of Software Architectures:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"There are various architectural styles and patterns used in software development, including:",(0,n.kt)("ul",{parentName:"li"},(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Monolithic:")," All components of the application are tightly integrated into a single codebase and deployed as a single unit."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Client-Server:")," The system is divided into client and server components, where clients request services from servers."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Microservices:")," The application is broken down into small, independently deployable services that communicate with each other via APIs."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Layered:")," The system is organized into layers, such as presentation, business logic, and data storage, with each layer responsible for specific functions."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Event-Driven:")," Components communicate through events and message queues, enabling asynchronous and loosely coupled systems.")))),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"4. Architectural Patterns:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Architectural patterns are reusable solutions to common architectural challenges. Examples include the Model-View-Controller (MVC) pattern for user interfaces and the publish-subscribe pattern for event-driven systems.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"5. Design Principles:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Software architecture is guided by design principles, such as the Single Responsibility Principle (SRP), Separation of Concerns (SoC), and the Dependency Inversion Principle (DIP), which help ensure that the architecture is maintainable and extensible.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"6. Documentation and Communication:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Effective documentation and communication of the software architecture are crucial for ensuring that all stakeholders have a shared understanding of the system's design and goals. This may include architectural diagrams, design documents, and presentations.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"7. Evolution and Maintenance:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Software architecture evolves over time as requirements change and the system grows. Maintenance involves making architectural decisions to accommodate new features and enhancements.")),(0,n.kt)("p",null,(0,n.kt)("strong",{parentName:"p"},"8. Role of the Software Architect:")),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A software architect is responsible for defining the software architecture, making important design decisions, and ensuring that the architecture aligns with the project's goals and constraints.")),(0,n.kt)("p",null,"In summary, software architecture is a critical aspect of software development that focuses on the high-level design and organization of a software system. It addresses structural organization, quality attributes, and design decisions to ensure that the software meets its functional and non-functional requirements while remaining maintainable and adaptable throughout its lifecycle."),(0,n.kt)("h2",{id:"links"},"Links"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Software_architecture"},"Software architecture - Wikipedia")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Architectural_pattern"},"Architectural pattern - Wikipedia")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Category:Software_architecture"},"Category:Software architecture - Wikipedia")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://martinfowler.com/architecture/"},"Software Architecture Guide")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://sketchplanations.com/plan-ahead"},"Plan ahead - Sketchplanations")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://blog.bytebytego.com/archive"},"Archive - ByteByteGo Newsletter")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://monorepo.tools/"},"Monorepo Explained")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://nx.dev/"},"Nx: Smart, Fast and Extensible Build System")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://lerna.js.org/"},"Documentation | Lerna")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.joelonsoftware.com/2000/04/06/things-you-should-never-do-part-i/"},"Things You Should Never Do, Part I \u2013 Joel on Software")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://principles.dev/p/"},"Principles Index")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Unix_philosophy"},"Unix philosophy - Wikipedia")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://hackernoon.com/100-programming-advice-from-robert-martins-clean-code"},"100 Pieces of Programming Advice from the Book Clean Code by Robert Martin | HackerNoon")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://architecturenotes.co/fallacies-of-distributed-systems/"},"Fallacies of Distributed Systems")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.12factor.net/"},"The Twelve-Factor App")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/ddd-by-examples/library"},"ddd-by-examples/library: A comprehensive Domain-Driven Design example with problem space strategic analysis and various tactical patterns.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/mgce/modular-monolith-nodejs"},"mgce/modular-monolith-nodejs: A project showing the implementation of the modular monolith architecture in Node.js.")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.freecodecamp.org/news/design-patterns-for-distributed-systems/"},"The Design Patterns for Distributed Systems Handbook \u2013 Key Concepts Every Developer Should Know")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://jasonformat.com/islands-architecture/"},"Islands Architecture - JASON Format")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://c4model.com/"},"The C4 model for visualising software architecture")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://www.coursera.org/learn/software-architecture"},"Software Architecture | Coursera")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/joelparkerhenderson/architecture-decision-record"},"joelparkerhenderson/architecture-decision-record: Architecture decision record (ADR) examples for software planning, IT leadership, and template documentation"))))}m.isMDXComponent=!0}}]);